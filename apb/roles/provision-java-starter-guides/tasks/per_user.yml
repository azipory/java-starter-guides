---
- name: per user
  block:
    - set_fact:
        my_user: "{{ item }}"
        
    # Create user project and make him admin
    - name: check if workshop user's project for user "{{ my_user }}" exists
      shell: "oc get project {{ my_user }}"
      register: user_project
      ignore_errors: true
      changed_when: false

    - name: Create workshop user's project for user "{{ my_user }}"
      command: "oc adm new-project {{ my_user }}"
      when: user_project is failed

    - name: Annotate the project as requested by user for user "{{ my_user }}"
      command: "oc annotate namespace {{my_user}} openshift.io/requester={{my_user}} --overwrite"

    - name: Award admin permission for user "{{ my_user }}"
      command: "oc adm policy add-role-to-user admin {{ my_user }} -n {{ my_user }}"

#    # Create cluster quota for the user to prevent abuse
#    - name: Create user Quota definition - clusterresourcequota
#      shell: >
#            oc create clusterquota clusterquota-"{{my_user}}"
#            --project-annotation-selector=openshift.io/requester="{{my_user}}"
#            --hard requests.cpu="{{quota_requests_cpu}}"
#            --hard limits.cpu="{{quota_limits_cpu}}"
#            --hard requests.memory="{{quota_requests_memory}}"
#            --hard limits.memory="{{quota_limits_memory}}"
#            --hard configmaps="{{quota_configmaps}}"
#            --hard pods="{{quota_pods}}"
#            --hard persistentvolumeclaims="{{quota_persistentvolumeclaims}}"
#            --hard services="{{quota_services}}"
#            --hard secrets="{{quota_secrets}}"
#            --hard requests.storage="{{quota_requests_storage}}"
#            --dry-run -o yaml > clusterquota-{{ my_user }}.yml
#      args:
#        chdir: "{{ git_dir.path }}"
#      tags: always
#
#
# TODO: Commented until there is a default project template that sets the defaults
#
#    - name: Apply user Quota - clusterresourcequota
#      command: "oc apply -f clusterquota-{{ my_user }}.yml"
#      args:
#        chdir: "{{ git_dir.path }}"
#      tags: always

    # Clone required project in Gogs
    #
    - name: Check if repository {{ reponame }} exists in git for user "{{ my_user }}"
      uri:
        url: http://{{ gogs_hostname }}/api/v1/repos/{{ my_user }}/{{ reponame }}
        user: "{{ my_user }}"
        password: "{{ openshift_user_password }}"
        force_basic_auth: true
        status_code: 200,404
      register: repo_result

    - name: Create git repository {{ reponame }} for user "{{ my_user }}"
      uri:
        url: http://{{ gogs_hostname }}/api/v1/user/repos
        method: POST
        body: '{"name": "{{ reponame }}", "private": false}'
        body_format: json
        user: "{{ my_user }}"
        password: "{{ openshift_user_password }}"
        status_code: 200,201
        force_basic_auth: true
      when: repo_result.status != 200

    - name: Push {{ reponame }} to git repository in Gogs for user "{{ my_user }}"
      shell: |
        git remote add {{ my_user }} http://{{ my_user }}:{{ openshift_user_password }}@{{ gogs_hostname }}/{{ my_user }}/{{ reponame }}.git
        git config --local user.email "{{ my_user }}@example.com"
        git config --local user.name "{{ my_user }}"
        git push -f --all {{ my_user }}
      args:
        chdir: "{{ tmp_dir.path }}/{{ reponame }}"
      when: repo_result.status != 200
